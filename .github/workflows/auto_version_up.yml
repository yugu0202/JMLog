name: Auto Version Up
on:
    pull_request:
        types:
            - opened
        branches:
            - main

permissions:
    contents: write
    pull-requests: write

jobs:
    create_version_up_pr:
        runs-on: ubuntu-latest
        env:
            FILE_PATH: jmlog/pubspec.yaml
            TZ: 'Asia/Tokyo'
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                ref: ${{ github.event.pull_request.head.ref }}
                fetch-depth: 0

            - name: Determine version type from PR title
              id: determine_version_type
              run: |
                PR_TITLE="${{ github.event.pull_request.title }}"
                if [[ "${PR_TITLE}" =~ ^\[major\] ]]; then
                    echo "VERSION_TYPE=major" >> $GITHUB_OUTPUT
                elif [[ "${PR_TITLE}" =~ ^\[minor\] ]]; then
                    echo "VERSION_TYPE=minor" >> $GITHUB_OUTPUT
                elif [[ "${PR_TITLE}" =~ ^\[patch\] ]]; then
                    echo "VERSION_TYPE=patch" >> $GITHUB_OUTPUT
                else
                    echo "VERSION_TYPE=patch" >> $GITHUB_OUTPUT
                fi

            - name: Auto Version Up
              id: auto_version_up
              run: |
                OLD_VERSION=$(grep -oP 'version: \K[0-9]+\.[0-9]+\.[0-9]+' ${{ env.FILE_PATH }})
                IFS='.' read -r -a version_parts <<< "${OLD_VERSION%+*}"
                IFS='+' read -r -a build_parts <<< "${OLD_VERSION##*.}"
                new_build=$(( build_parts[1] + 1 ))
                new_mejor=${version_parts[0]}
                new_minor=${version_parts[1]}
                new_patch=${version_parts[2]}
                case "${{ steps.determine_version_type.outputs.VERSION_TYPE }}" in
                    major)
                        new_mejor=$(( new_mejor + 1 ))
                        new_minor=0
                        new_patch=0
                        ;;
                    minor)
                        new_minor=$(( new_minor + 1 ))
                        new_patch=0
                        ;;
                    patch)
                        new_patch=$(( new_patch + 1 ))
                        ;;
                esac
                NEW_VERSION="${new_mejor}.${new_minor}.${new_patch}+${new_build}"
                echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
                sed -i "s/version: ${OLD_VERSION}/version: ${NEW_VERSION}/" ${{ env.FILE_PATH }}
            
            - name: Add and commit
              uses: EndBug/add-and-commit@v9
              with:
                new_branch: version/v${{ steps.auto_version_up.outputs.NEW_VERSION }}
                message: "Version up to v${{ steps.auto_version_up.outputs.NEW_VERSION }}"
                add: ${{ env.FILE_PATH }}

            - name: Create PR
              run: |
                NEW_VERSION="${{ steps.auto_version_up.outputs.NEW_VERSION }}"
                gh pr create --title "Version up to v${NEW_VERSION}" --body "Auto version up to v${NEW_VERSION}" --base ${{ github.event.pull_request.head.ref }} --head version/v${NEW_VERSION}
